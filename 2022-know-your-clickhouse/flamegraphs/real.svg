<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Real</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>DB::Arena::MemoryChunk::~MemoryChunk() (1 samples, 0.04%)</title><rect x="40.8" y="261" width="0.5" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="43.76" y="271.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::Index::getSizeOfIndexType(DB::IColumn const&amp;, unsigned long) (2 samples, 0.09%)</title><rect x="25.1" y="549" width="1.0" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="28.13" y="559.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;char8_t&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;char8_t&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long)::\'lambda\'(unsigned long&amp;)::operator()(unsigned long&amp;) const (2 samples, 0.09%)</title><rect x="1069.5" y="197" width="1.0" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="1072.48" y="207.5" ></text>
</g>
<g >
<title>unw_backtrace (2 samples, 0.09%)</title><rect x="386.2" y="277" width="1.0" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="389.19" y="287.5" ></text>
</g>
<g >
<title>extent_split_impl.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1113.9" y="133" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1116.85" y="143.5" ></text>
</g>
<g >
<title>large_ralloc_no_move (1 samples, 0.04%)</title><rect x="1118.9" y="149" width="0.5" height="15.0" fill="rgb(242,101,41)" rx="2" ry="2" />
<text  x="1121.90" y="159.5" ></text>
</g>
<g >
<title>arena_ralloc (2 samples, 0.09%)</title><rect x="1095.7" y="149" width="1.0" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="1098.70" y="159.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::CityHash128WithSeed(char const*, unsigned long, std::__1::pair&lt;unsigned long, unsigned long&gt;) (1 samples, 0.04%)</title><rect x="1107.3" y="197" width="0.5" height="15.0" fill="rgb(240,117,39)" rx="2" ry="2" />
<text  x="1110.30" y="207.5" ></text>
</g>
<g >
<title>DB::Arena::MemoryChunk::~MemoryChunk() (3 samples, 0.13%)</title><rect x="39.8" y="325" width="1.5" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="42.75" y="335.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::Index::checkSizeOfType() (4 samples, 0.17%)</title><rect x="423.5" y="293" width="2.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="426.50" y="303.5" ></text>
</g>
<g >
<title>arena_maybe_decay.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1118.9" y="101" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1121.90" y="111.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::freeNoTrack(void*, unsigned long) (1 samples, 0.04%)</title><rect x="40.3" y="245" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="43.26" y="255.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;unsigned short&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;unsigned short&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long) (10 samples, 0.43%)</title><rect x="1086.6" y="149" width="5.1" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1089.62" y="159.5" ></text>
</g>
<g >
<title>DB::TraceSender::send(DB::TraceType, StackTrace const&amp;, long) (1 samples, 0.04%)</title><rect x="77.1" y="341" width="0.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="80.07" y="351.5" ></text>
</g>
<g >
<title>void DB::Aggregator::convertToBlockImplFinal&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;, false, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, std::__1::vector&lt;DB::IColumn*, std::__1::allocator&lt;DB::IColumn*&gt; &gt;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, DB::Arena*) const (828 samples, 35.38%)</title><rect x="387.2" y="341" width="417.5" height="15.0" fill="rgb(237,131,35)" rx="2" ry="2" />
<text  x="390.20" y="351.5" >void DB::Aggregator::convertToBlockImplFinal&lt;DB::Aggrega..</text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned short&gt;::insertRangeFrom(DB::IColumn const&amp;, unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1064.9" y="229" width="1.0" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1067.94" y="239.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (1 samples, 0.04%)</title><rect x="684.7" y="229" width="0.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="687.72" y="239.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::performRequiredConversions(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;) (1 samples, 0.04%)</title><rect x="1060.9" y="325" width="0.5" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1063.91" y="335.5" ></text>
</g>
<g >
<title>DB::Arena::MemoryChunk::~MemoryChunk() (2 samples, 0.09%)</title><rect x="40.3" y="277" width="1.0" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="43.26" y="287.5" ></text>
</g>
<g >
<title>DB::PipelineExecutor::execute(unsigned long) (68 samples, 2.91%)</title><rect x="1154.7" y="469" width="34.3" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1157.70" y="479.5" >DB..</text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;char8_t&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;char8_t&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long) (10 samples, 0.43%)</title><rect x="1086.6" y="181" width="5.1" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1089.62" y="191.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1095.7" y="181" width="1.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1098.70" y="191.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free(void*, unsigned long) (1 samples, 0.04%)</title><rect x="79.1" y="373" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="82.09" y="383.5" ></text>
</g>
<g >
<title>DB::IMergeTreeDataPart::getSerialization(DB::NameAndTypePair const&amp;) const (1 samples, 0.04%)</title><rect x="1061.4" y="277" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1064.41" y="287.5" ></text>
</g>
<g >
<title>memcpy (3 samples, 0.13%)</title><rect x="1119.4" y="149" width="1.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1122.40" y="159.5" ></text>
</g>
<g >
<title>DB::ReadBuffer::readStrict(char*, unsigned long) (1 samples, 0.04%)</title><rect x="1105.8" y="229" width="0.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1108.79" y="239.5" ></text>
</g>
<g >
<title>unw_step (2 samples, 0.09%)</title><rect x="78.1" y="325" width="1.0" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="81.08" y="335.5" ></text>
</g>
<g >
<title>arena_decay (1 samples, 0.04%)</title><rect x="871.8" y="325" width="0.5" height="15.0" fill="rgb(241,137,39)" rx="2" ry="2" />
<text  x="874.80" y="335.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::freeNoTrack(void*, unsigned long) (1 samples, 0.04%)</title><rect x="39.8" y="277" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="42.75" y="287.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (1 samples, 0.04%)</title><rect x="384.2" y="341" width="0.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="387.17" y="351.5" ></text>
</g>
<g >
<title>madvise (1 samples, 0.04%)</title><rect x="1118.9" y="37" width="0.5" height="15.0" fill="rgb(241,99,40)" rx="2" ry="2" />
<text  x="1121.90" y="47.5" ></text>
</g>
<g >
<title>unw_step (2 samples, 0.09%)</title><rect x="386.2" y="261" width="1.0" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="389.19" y="271.5" ></text>
</g>
<g >
<title>unw_backtrace (1 samples, 0.04%)</title><rect x="79.1" y="309" width="0.5" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="82.09" y="319.5" ></text>
</g>
<g >
<title>__libc_realloc (2 samples, 0.09%)</title><rect x="1095.7" y="165" width="1.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1098.70" y="175.5" ></text>
</g>
<g >
<title>DB::SourceWithProgress::progress(DB::Progress const&amp;) (2 samples, 0.09%)</title><rect x="1121.4" y="341" width="1.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1124.42" y="351.5" ></text>
</g>
<g >
<title>MemoryTracker::free(long) (2 samples, 0.09%)</title><rect x="895.0" y="277" width="1.0" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="898.00" y="287.5" ></text>
</g>
<g >
<title>arena_decay_impl.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1059.9" y="277" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1062.90" y="287.5" ></text>
</g>
<g >
<title>memcpy (3 samples, 0.13%)</title><rect x="898.5" y="277" width="1.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="901.53" y="287.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.04%)</title><rect x="864.2" y="261" width="0.5" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="867.24" y="271.5" ></text>
</g>
<g >
<title>DB::CompressionCodecLZ4::doDecompressData(char const*, unsigned int, char*, unsigned int) const (3 samples, 0.13%)</title><rect x="1111.8" y="197" width="1.6" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1114.84" y="207.5" ></text>
</g>
<g >
<title>unw_backtrace (1 samples, 0.04%)</title><rect x="384.2" y="309" width="0.5" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="387.17" y="319.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (14 samples, 0.60%)</title><rect x="864.7" y="261" width="7.1" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="867.74" y="271.5" ></text>
</g>
<g >
<title>unw_backtrace (2 samples, 0.09%)</title><rect x="656.0" y="213" width="1.0" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="658.97" y="223.5" ></text>
</g>
<g >
<title>large_ralloc (2 samples, 0.09%)</title><rect x="1090.7" y="69" width="1.0" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1093.66" y="79.5" ></text>
</g>
<g >
<title>DB::SerializationNumber&lt;signed char&gt;::deserializeBinaryBulk(DB::IColumn&amp;, DB::ReadBuffer&amp;, unsigned long, double) const (3 samples, 0.13%)</title><rect x="1061.9" y="245" width="1.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1064.91" y="255.5" ></text>
</g>
<g >
<title>extent_split_interior (1 samples, 0.04%)</title><rect x="1113.9" y="149" width="0.5" height="15.0" fill="rgb(240,145,39)" rx="2" ry="2" />
<text  x="1116.85" y="159.5" ></text>
</g>
<g >
<title>Poco::ThreadImpl::runnableEntry(void*) (72 samples, 3.08%)</title><rect x="39.8" y="517" width="36.3" height="15.0" fill="rgb(240,215,39)" rx="2" ry="2" />
<text  x="42.75" y="527.5" >Poc..</text>
</g>
<g >
<title>arena_extents_dirty_dalloc (1 samples, 0.04%)</title><rect x="1086.1" y="149" width="0.5" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="1089.12" y="159.5" ></text>
</g>
<g >
<title>unw_step (1 samples, 0.04%)</title><rect x="663.5" y="197" width="0.5" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="666.54" y="207.5" ></text>
</g>
<g >
<title>DB::getStream(bool, DB::ISerialization::SubstreamPath const&amp;, std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::unique_ptr&lt;DB::MergeTreeReaderStream, std::__1::default_delete&lt;DB::MergeTreeReaderStream&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::unique_ptr&lt;DB::MergeTreeReaderStream, std::__1::default_delete&lt;DB::MergeTreeReaderStream&gt; &gt; &gt; &gt; &gt;&amp;, DB::NameAndTypePair const&amp;, unsigned long, bool, unsigned long, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;&amp;) (2 samples, 0.09%)</title><rect x="1106.3" y="229" width="1.0" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1109.29" y="239.5" ></text>
</g>
<g >
<title>arena_decay_to_limit.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1120.9" y="101" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1123.91" y="111.5" ></text>
</g>
<g >
<title>DB::AggregatingTransform::consume(DB::Chunk) (609 samples, 26.03%)</title><rect x="77.1" y="421" width="307.1" height="15.0" fill="rgb(243,133,41)" rx="2" ry="2" />
<text  x="80.07" y="431.5" >DB::AggregatingTransform::consume(DB::Chu..</text>
</g>
<g >
<title>arena_ralloc (2 samples, 0.09%)</title><rect x="1081.6" y="149" width="1.0" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="1084.58" y="159.5" ></text>
</g>
<g >
<title>void miniselect::floyd_rivest_detail::floyd_rivest_select_loop&lt;unsigned long*, DB::ColumnVector&lt;unsigned long&gt;::greater&amp;, long&gt;(unsigned long*, long, long, long, DB::ColumnVector&lt;unsigned long&gt;::greater&amp;) (1 samples, 0.04%)</title><rect x="384.7" y="357" width="0.5" height="15.0" fill="rgb(243,131,42)" rx="2" ry="2" />
<text  x="387.68" y="367.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy_invoker&lt;void ()&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;ThreadFromGlobalPool::ThreadFromGlobalPool&lt;DB::PipelineExecutor::executeImpl(unsigned long)::$_1&gt;(DB::PipelineExecutor::executeImpl(unsigned long)::$_1&amp;&amp;)::\'lambda\'(), void ()&gt; &gt;(std::__1::__function::__policy_storage const*) (2,139 samples, 91.41%)</title><rect x="76.1" y="485" width="1078.6" height="15.0" fill="rgb(237,131,36)" rx="2" ry="2" />
<text  x="79.06" y="495.5" >void std::__1::__function::__policy_invoker&lt;void ()&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;ThreadFromGlobalPool::ThreadFromGlobalPoo..</text>
</g>
<g >
<title>DB::ISerialization::deserializeBinaryBulkWithMultipleStreams(COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&amp;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt;&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;*) const (3 samples, 0.13%)</title><rect x="1061.9" y="261" width="1.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1064.91" y="271.5" ></text>
</g>
<g >
<title>munmap (1 samples, 0.04%)</title><rect x="1060.4" y="277" width="0.5" height="15.0" fill="rgb(240,116,39)" rx="2" ry="2" />
<text  x="1063.40" y="287.5" ></text>
</g>
<g >
<title>DB::ColumnString::serializeValueIntoArena(unsigned long, DB::Arena&amp;, char const*&amp;) const (12 samples, 0.51%)</title><rect x="26.6" y="549" width="6.1" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="29.64" y="559.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.04%)</title><rect x="384.2" y="261" width="0.5" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="387.17" y="271.5" ></text>
</g>
<g >
<title>HashTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::resize(unsigned long, unsigned long) (371 samples, 15.85%)</title><rect x="872.8" y="357" width="187.1" height="15.0" fill="rgb(247,146,46)" rx="2" ry="2" />
<text  x="875.81" y="367.5" >HashTable&lt;StringRef, Has..</text>
</g>
<g >
<title>void DB::deserializeBinarySSE2&lt;1&gt;(DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;, DB::ReadBuffer&amp;, unsigned long) (14 samples, 0.60%)</title><rect x="1114.4" y="245" width="7.0" height="15.0" fill="rgb(247,131,46)" rx="2" ry="2" />
<text  x="1117.36" y="255.5" ></text>
</g>
<g >
<title>madvise (1 samples, 0.04%)</title><rect x="75.6" y="261" width="0.5" height="15.0" fill="rgb(241,99,40)" rx="2" ry="2" />
<text  x="78.56" y="271.5" ></text>
</g>
<g >
<title>arena_ralloc (52 samples, 2.22%)</title><rect x="289.9" y="325" width="26.2" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="292.87" y="335.5" >a..</text>
</g>
<g >
<title>DB::CompressedReadBufferFromFile::nextImpl() (12 samples, 0.51%)</title><rect x="1107.3" y="229" width="6.1" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1110.30" y="239.5" ></text>
</g>
<g >
<title>DB::Arena::MemoryChunk::~MemoryChunk() (2 samples, 0.09%)</title><rect x="40.3" y="293" width="1.0" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="43.26" y="303.5" ></text>
</g>
<g >
<title>bool LZ4::(anonymous namespace)::decompressImpl&lt;16ul, false&gt;(char const*, char*, unsigned long, unsigned long) (.llvm.5035804696300559578) (1 samples, 0.04%)</title><rect x="1111.8" y="165" width="0.5" height="15.0" fill="rgb(247,151,46)" rx="2" ry="2" />
<text  x="1114.84" y="175.5" ></text>
</g>
<g >
<title>DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeFrom(DB::IColumn const&amp;, unsigned long, unsigned long) (27 samples, 1.15%)</title><rect x="1069.5" y="229" width="13.6" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1072.48" y="239.5" ></text>
</g>
<g >
<title>void HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::forEachValue&lt;void DB::Aggregator::convertToBlockImplFinal&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;, false, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, std::__1::vector&lt;DB::IColumn*, std::__1::allocator&lt;DB::IColumn*&gt; &gt;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, DB::Arena*) const::\'lambda\'(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; const&amp;, auto&amp;)&gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;&amp;) (784 samples, 33.50%)</title><rect x="409.4" y="325" width="395.3" height="15.0" fill="rgb(246,131,45)" rx="2" ry="2" />
<text  x="412.38" y="335.5" >void HashMapTable&lt;StringRef, HashMapCellWithSavedHash..</text>
</g>
<g >
<title>unw_backtrace (2 samples, 0.09%)</title><rect x="288.9" y="309" width="1.0" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="291.86" y="319.5" ></text>
</g>
<g >
<title>DB::MergeTreeBaseSelectProcessor::generate() (122 samples, 5.21%)</title><rect x="1060.9" y="389" width="61.5" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1063.91" y="399.5" >DB::Me..</text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1098.7" y="229" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1101.73" y="239.5" ></text>
</g>
<g >
<title>DB::Field::~Field() (1 samples, 0.04%)</title><rect x="35.2" y="549" width="0.5" height="15.0" fill="rgb(242,133,41)" rx="2" ry="2" />
<text  x="38.21" y="559.5" ></text>
</g>
<g >
<title>tcache_arena_dissociate.llvm.13043938711819689974 (1 samples, 0.04%)</title><rect x="289.9" y="277" width="0.5" height="15.0" fill="rgb(245,178,44)" rx="2" ry="2" />
<text  x="292.87" y="287.5" ></text>
</g>
<g >
<title>Poco::Net::TCPServerConnection::start() (72 samples, 3.08%)</title><rect x="39.8" y="469" width="36.3" height="15.0" fill="rgb(239,215,38)" rx="2" ry="2" />
<text  x="42.75" y="479.5" >Poc..</text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (5 samples, 0.21%)</title><rect x="896.0" y="325" width="2.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="899.01" y="335.5" ></text>
</g>
<g >
<title>DB::DataTypeEnum&lt;signed char&gt;::doGetDefaultSerialization() const (1 samples, 0.04%)</title><rect x="1061.4" y="245" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1064.41" y="255.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (2 samples, 0.09%)</title><rect x="656.0" y="229" width="1.0" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="658.97" y="239.5" ></text>
</g>
<g >
<title>DB::ISource::work() (122 samples, 5.21%)</title><rect x="1060.9" y="421" width="61.5" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="1063.91" y="431.5" >DB::IS..</text>
</g>
<g >
<title>__libc_realloc (2 samples, 0.09%)</title><rect x="1064.9" y="197" width="1.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1067.94" y="207.5" ></text>
</g>
<g >
<title>ConcurrentBoundedQueue&lt;DB::Chunk&gt;::popImpl(DB::Chunk&amp;, std::__1::optional&lt;unsigned long&gt;) (68 samples, 2.91%)</title><rect x="41.3" y="357" width="34.3" height="15.0" fill="rgb(240,162,39)" rx="2" ry="2" />
<text  x="44.26" y="367.5" >Co..</text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (1 samples, 0.04%)</title><rect x="79.1" y="277" width="0.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="82.09" y="287.5" ></text>
</g>
<g >
<title>DB::ISimpleTransform::work() (2 samples, 0.09%)</title><rect x="384.2" y="437" width="1.0" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="387.17" y="447.5" ></text>
</g>
<g >
<title>__libc_realloc (2 samples, 0.09%)</title><rect x="664.0" y="245" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="667.04" y="255.5" ></text>
</g>
<g >
<title> (2,279 samples, 97.39%)</title><rect x="39.8" y="533" width="1149.2" height="15.0" fill="rgb(255,230,55)" rx="2" ry="2" />
<text  x="42.75" y="543.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (1 samples, 0.04%)</title><rect x="864.2" y="293" width="0.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="867.24" y="303.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (1 samples, 0.04%)</title><rect x="684.7" y="245" width="0.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="687.72" y="255.5" ></text>
</g>
<g >
<title>HashTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::reinsert(HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;&amp;, unsigned long) (21 samples, 0.90%)</title><rect x="372.6" y="357" width="10.6" height="15.0" fill="rgb(247,146,46)" rx="2" ry="2" />
<text  x="375.57" y="367.5" ></text>
</g>
<g >
<title>arena_maybe_decay.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1062.9" y="149" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1065.92" y="159.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::free(void*, unsigned long) (4 samples, 0.17%)</title><rect x="385.2" y="341" width="2.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="388.18" y="351.5" ></text>
</g>
<g >
<title>write (1 samples, 0.04%)</title><rect x="77.1" y="309" width="0.5" height="15.0" fill="rgb(240,108,38)" rx="2" ry="2" />
<text  x="80.07" y="319.5" ></text>
</g>
<g >
<title>DB::ReadBufferFromFileDescriptor::nextImpl() (1 samples, 0.04%)</title><rect x="1100.7" y="197" width="0.5" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1103.74" y="207.5" ></text>
</g>
<g >
<title>unw_backtrace (1 samples, 0.04%)</title><rect x="864.2" y="325" width="0.5" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="867.24" y="335.5" ></text>
</g>
<g >
<title>memcpy (3 samples, 0.13%)</title><rect x="900.0" y="325" width="1.6" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="903.04" y="335.5" ></text>
</g>
<g >
<title>large_ralloc (2 samples, 0.09%)</title><rect x="664.0" y="213" width="1.1" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="667.04" y="223.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;::resize&lt;&gt;(unsigned long) (1 samples, 0.04%)</title><rect x="384.2" y="357" width="0.5" height="15.0" fill="rgb(247,131,46)" rx="2" ry="2" />
<text  x="387.17" y="367.5" ></text>
</g>
<g >
<title>DB::TCPHandler::run() (72 samples, 3.08%)</title><rect x="39.8" y="453" width="36.3" height="15.0" fill="rgb(244,133,43)" rx="2" ry="2" />
<text  x="42.75" y="463.5" >DB:..</text>
</g>
<g >
<title>pread64 (1 samples, 0.04%)</title><rect x="1100.7" y="181" width="0.5" height="15.0" fill="rgb(237,177,36)" rx="2" ry="2" />
<text  x="1103.74" y="191.5" ></text>
</g>
<g >
<title>extent_purge_forced_default.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1120.9" y="69" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1123.91" y="79.5" ></text>
</g>
<g >
<title>__libc_realloc (3 samples, 0.13%)</title><rect x="898.5" y="325" width="1.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="901.53" y="335.5" ></text>
</g>
<g >
<title>DB::TCPHandler::processOrdinaryQueryWithProcessors() (69 samples, 2.95%)</title><rect x="41.3" y="421" width="34.8" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="44.26" y="431.5" >DB..</text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (2 samples, 0.09%)</title><rect x="288.9" y="341" width="1.0" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="291.86" y="351.5" ></text>
</g>
<g >
<title>__libc_realloc (2 samples, 0.09%)</title><rect x="1080.1" y="165" width="1.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1083.07" y="175.5" ></text>
</g>
<g >
<title>DB::ISource::tryGenerate() (1,338 samples, 57.18%)</title><rect x="385.2" y="421" width="674.7" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="388.18" y="431.5" >DB::ISource::tryGenerate()</text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::Arena, std::__1::allocator&lt;DB::Arena&gt; &gt;::__on_zero_shared() (3 samples, 0.13%)</title><rect x="39.8" y="341" width="1.5" height="15.0" fill="rgb(242,146,41)" rx="2" ry="2" />
<text  x="42.75" y="351.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (1 samples, 0.04%)</title><rect x="384.2" y="277" width="0.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="387.17" y="287.5" ></text>
</g>
<g >
<title>DB::ColumnString::serializeValueIntoArena(unsigned long, DB::Arena&amp;, char const*&amp;) const (100 samples, 4.27%)</title><rect x="316.1" y="357" width="50.4" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="319.09" y="367.5" >DB::C..</text>
</g>
<g >
<title> (27 samples, 1.15%)</title><rect x="10.0" y="549" width="13.6" height="15.0" fill="rgb(255,230,55)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1064.9" y="213" width="1.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1067.94" y="223.5" ></text>
</g>
<g >
<title>MemoryTracker::free(long) (1 samples, 0.04%)</title><rect x="79.1" y="325" width="0.5" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="82.09" y="335.5" ></text>
</g>
<g >
<title>DB::Block DB::Aggregator::prepareBlockAndFill&lt;DB::Block DB::Aggregator::convertOneBucketToBlock&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; &gt;(DB::AggregatedDataVariants&amp;, DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, DB::Arena*, bool, unsigned long) const::\'lambda\'(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, std::__1::vector&lt;DB::PODArray&lt;char*, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;*, std::__1::allocator&lt;DB::PODArray&lt;char*, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;*&gt; &gt;&amp;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, bool)&gt;(DB::AggregatedDataVariants&amp;, bool, unsigned long, DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;&amp;) const (832 samples, 35.56%)</title><rect x="385.2" y="373" width="419.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="388.18" y="383.5" >DB::Block DB::Aggregator::prepareBlockAndFill&lt;DB::Block D..</text>
</g>
<g >
<title>DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;::insert(StringRef const&amp;) (2 samples, 0.09%)</title><rect x="1069.5" y="165" width="1.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1072.48" y="175.5" ></text>
</g>
<g >
<title>mmap64 (5 samples, 0.21%)</title><rect x="892.5" y="309" width="2.5" height="15.0" fill="rgb(237,104,36)" rx="2" ry="2" />
<text  x="895.48" y="319.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::ColumnString::indexImpl&lt;char8_t&gt;(DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, unsigned long) const (1 samples, 0.04%)</title><rect x="79.6" y="341" width="0.5" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="82.59" y="351.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferFromFile::readBig(char*, unsigned long) (2 samples, 0.09%)</title><rect x="1061.9" y="229" width="1.0" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1064.91" y="239.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::selectIndexImpl&lt;DB::ColumnString&gt;(DB::ColumnString const&amp;, DB::IColumn const&amp;, unsigned long) (3 samples, 0.13%)</title><rect x="1097.2" y="229" width="1.5" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1100.21" y="239.5" ></text>
</g>
<g >
<title>unw_step (1 samples, 0.04%)</title><rect x="684.7" y="197" width="0.5" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="687.72" y="207.5" ></text>
</g>
<g >
<title>libunwind::UnwindCursor&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::setInfoBasedOnIPRegister(bool) (1 samples, 0.04%)</title><rect x="78.6" y="309" width="0.5" height="15.0" fill="rgb(241,129,39)" rx="2" ry="2" />
<text  x="81.58" y="319.5" ></text>
</g>
<g >
<title>arena_maybe_decay.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1059.9" y="261" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1062.90" y="271.5" ></text>
</g>
<g >
<title>DB::SourceWithProgress::work() (122 samples, 5.21%)</title><rect x="1060.9" y="437" width="61.5" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="1063.91" y="447.5" >DB::So..</text>
</g>
<g >
<title>void DB::PODArrayBase&lt;1ul, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;::resize&lt;&gt;(unsigned long) (6 samples, 0.26%)</title><rect x="1118.4" y="229" width="3.0" height="15.0" fill="rgb(247,131,46)" rx="2" ry="2" />
<text  x="1121.39" y="239.5" ></text>
</g>
<g >
<title>memcpy (7 samples, 0.30%)</title><rect x="657.0" y="197" width="3.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="659.98" y="207.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::deserializeAndInsertFromArena(char const*) (528 samples, 22.56%)</title><rect x="420.5" y="309" width="266.2" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="423.48" y="319.5" >DB::ColumnLowCardinality::deseriali..</text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1092.2" y="85" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1095.17" y="95.5" ></text>
</g>
<g >
<title>__clone (2,279 samples, 97.39%)</title><rect x="39.8" y="549" width="1149.2" height="15.0" fill="rgb(251,144,50)" rx="2" ry="2" />
<text  x="42.75" y="559.5" >__clone</text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::selectIndexImpl&lt;DB::ColumnVector&lt;unsigned short&gt; &gt;(DB::ColumnVector&lt;unsigned short&gt; const&amp;, DB::IColumn const&amp;, unsigned long) (3 samples, 0.13%)</title><rect x="1083.1" y="213" width="1.5" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1086.09" y="223.5" ></text>
</g>
<g >
<title>DB::CompressionCodecLZ4::doDecompressData(char const*, unsigned int, char*, unsigned int) const (1 samples, 0.04%)</title><rect x="1061.9" y="181" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1064.91" y="191.5" ></text>
</g>
<g >
<title>syscall (5 samples, 0.21%)</title><rect x="896.0" y="245" width="2.5" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="899.01" y="255.5" ></text>
</g>
<g >
<title>unw_backtrace (5 samples, 0.21%)</title><rect x="896.0" y="293" width="2.5" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="899.01" y="303.5" ></text>
</g>
<g >
<title>void HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::forEachValue&lt;void DB::Aggregator::convertToBlockImplFinal&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;, false, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, std::__1::vector&lt;DB::IColumn*, std::__1::allocator&lt;DB::IColumn*&gt; &gt;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, DB::Arena*) const::\'lambda\'(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; const&amp;, auto&amp;)&gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="1189.5" y="549" width="0.5" height="15.0" fill="rgb(246,131,45)" rx="2" ry="2" />
<text  x="1192.50" y="559.5" ></text>
</g>
<g >
<title>large_ralloc (2 samples, 0.09%)</title><rect x="1080.1" y="133" width="1.0" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1083.07" y="143.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.09%)</title><rect x="386.2" y="229" width="1.0" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="389.19" y="239.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait (68 samples, 2.91%)</title><rect x="41.3" y="341" width="34.3" height="15.0" fill="rgb(237,158,35)" rx="2" ry="2" />
<text  x="44.26" y="351.5" >pt..</text>
</g>
<g >
<title>arena_maybe_decay.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="871.8" y="293" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="874.80" y="303.5" ></text>
</g>
<g >
<title>memcpy (4 samples, 0.17%)</title><rect x="660.5" y="245" width="2.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="663.51" y="255.5" ></text>
</g>
<g >
<title>void DB::Aggregator::mergeDataImpl&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;, false, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, DB::Arena*) const (506 samples, 21.62%)</title><rect x="804.7" y="373" width="255.2" height="15.0" fill="rgb(237,131,35)" rx="2" ry="2" />
<text  x="807.74" y="383.5" >void DB::Aggregator::mergeDataImpl..</text>
</g>
<g >
<title>munmap (1 samples, 0.04%)</title><rect x="40.3" y="229" width="0.5" height="15.0" fill="rgb(240,116,39)" rx="2" ry="2" />
<text  x="43.26" y="239.5" ></text>
</g>
<g >
<title>DB::IDataType::getSerialization(DB::NameAndTypePair const&amp;) (1 samples, 0.04%)</title><rect x="1061.4" y="261" width="0.5" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1064.41" y="271.5" ></text>
</g>
<g >
<title>DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;::insert(StringRef const&amp;) (25 samples, 1.07%)</title><rect x="1070.5" y="197" width="12.6" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1073.49" y="207.5" ></text>
</g>
<g >
<title>DB::Chunk DB::MergeSorter::mergeImpl&lt;DB::SortingHeap&lt;DB::SimpleSortCursor&gt; &gt;(DB::SortingHeap&lt;DB::SimpleSortCursor&gt;&amp;) (2 samples, 0.09%)</title><rect x="1059.9" y="373" width="1.0" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1062.90" y="383.5" ></text>
</g>
<g >
<title>DB::MergeTreeBaseSelectProcessor::readFromPartImpl() (122 samples, 5.21%)</title><rect x="1060.9" y="357" width="61.5" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1063.91" y="367.5" >DB::Me..</text>
</g>
<g >
<title>munmap (2 samples, 0.09%)</title><rect x="385.2" y="309" width="1.0" height="15.0" fill="rgb(240,116,39)" rx="2" ry="2" />
<text  x="388.18" y="319.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::~ColumnLowCardinality() (2 samples, 0.09%)</title><rect x="1059.9" y="357" width="1.0" height="15.0" fill="rgb(244,133,43)" rx="2" ry="2" />
<text  x="1062.90" y="367.5" ></text>
</g>
<g >
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void ThreadPoolImpl&lt;std::__1::thread&gt;::scheduleImpl&lt;void&gt;(std::__1::function&lt;void ()&gt;, int, std::__1::optional&lt;unsigned long&gt;)::\'lambda0\'()&gt; &gt;(void*) (2,207 samples, 94.32%)</title><rect x="76.1" y="517" width="1112.9" height="15.0" fill="rgb(240,131,39)" rx="2" ry="2" />
<text  x="79.06" y="527.5" >void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void ..</text>
</g>
<g >
<title>DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;::insert(StringRef const&amp;) (10 samples, 0.43%)</title><rect x="1086.6" y="133" width="5.1" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1089.62" y="143.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (1 samples, 0.04%)</title><rect x="78.1" y="309" width="0.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="81.08" y="319.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free(void*, unsigned long) (1 samples, 0.04%)</title><rect x="40.8" y="245" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="43.76" y="255.5" ></text>
</g>
<g >
<title>large_ralloc (3 samples, 0.13%)</title><rect x="898.5" y="293" width="1.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="901.53" y="303.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free(void*, unsigned long) (1 samples, 0.04%)</title><rect x="40.3" y="261" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="43.26" y="271.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (4 samples, 0.17%)</title><rect x="684.7" y="261" width="2.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="687.72" y="271.5" ></text>
</g>
<g >
<title>DB::ExecutionThreadContext::wait(std::__1::atomic&lt;bool&gt;&amp;) (64 samples, 2.74%)</title><rect x="1122.4" y="453" width="32.3" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1125.43" y="463.5" >DB..</text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1062.4" y="213" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1065.42" y="223.5" ></text>
</g>
<g >
<title>DB::WriteBufferFromFileDescriptorDiscardOnFailure::nextImpl() (1 samples, 0.04%)</title><rect x="77.1" y="325" width="0.5" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="80.07" y="335.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1113.4" y="213" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1116.35" y="223.5" ></text>
</g>
<g >
<title>extent_purge_lazy_impl.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="75.6" y="293" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="78.56" y="303.5" ></text>
</g>
<g >
<title>arena_decay (1 samples, 0.04%)</title><rect x="1118.9" y="133" width="0.5" height="15.0" fill="rgb(241,137,39)" rx="2" ry="2" />
<text  x="1121.90" y="143.5" ></text>
</g>
<g >
<title>std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::unique_ptr&lt;DB::MergeTreeReaderStream, std::__1::default_delete&lt;DB::MergeTreeReaderStream&gt; &gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::unique_ptr&lt;DB::MergeTreeReaderStream, std::__1::default_delete&lt;DB::MergeTreeReaderStream&gt; &gt; &gt;, void*&gt;*, long&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::unique_ptr&lt;DB::MergeTreeReaderStream, std::__1::default_delete&lt;DB::MergeTreeReaderStream&gt; &gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::unique_ptr&lt;DB::MergeTreeReaderStream, std::__1::default_delete&lt;DB::MergeTreeReaderStream&gt; &gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::unique_ptr&lt;DB::MergeTreeReaderStream, std::__1::default_delete&lt;DB::MergeTreeReaderStream&gt; &gt; &gt; &gt; &gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1106.8" y="213" width="0.5" height="15.0" fill="rgb(242,146,40)" rx="2" ry="2" />
<text  x="1109.79" y="223.5" ></text>
</g>
<g >
<title>arena_ralloc (2 samples, 0.09%)</title><rect x="1090.7" y="85" width="1.0" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="1093.66" y="95.5" ></text>
</g>
<g >
<title>DB::performRequiredConversions(DB::Block&amp;, DB::NamesAndTypesList const&amp;, std::__1::shared_ptr&lt;DB::Context const&gt;) (1 samples, 0.04%)</title><rect x="1060.9" y="309" width="0.5" height="15.0" fill="rgb(239,133,38)" rx="2" ry="2" />
<text  x="1063.91" y="319.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;unsigned short&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;unsigned short&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long) (2 samples, 0.09%)</title><rect x="1091.7" y="181" width="1.0" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1094.67" y="191.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::Index::checkSizeOfType() (2 samples, 0.09%)</title><rect x="24.1" y="549" width="1.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="27.12" y="559.5" ></text>
</g>
<g >
<title>DB::ColumnUnique&lt;DB::ColumnString&gt;::~ColumnUnique() (2 samples, 0.09%)</title><rect x="1059.9" y="341" width="1.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1062.90" y="351.5" ></text>
</g>
<g >
<title>DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;) (119 samples, 5.09%)</title><rect x="1061.4" y="309" width="60.0" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1064.41" y="319.5" >DB::Me..</text>
</g>
<g >
<title>DB::EnumValues&lt;signed char&gt;::EnumValues(std::__1::vector&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, signed char&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, signed char&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1061.4" y="229" width="0.5" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1064.41" y="239.5" ></text>
</g>
<g >
<title>unw_backtrace (2 samples, 0.09%)</title><rect x="895.0" y="261" width="1.0" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="898.00" y="271.5" ></text>
</g>
<g >
<title>arena_ralloc (3 samples, 0.13%)</title><rect x="685.2" y="229" width="1.5" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="688.22" y="239.5" ></text>
</g>
<g >
<title>DB::AggregatingTransform::work() (609 samples, 26.03%)</title><rect x="77.1" y="437" width="307.1" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="80.07" y="447.5" >DB::AggregatingTransform::work()</text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (4 samples, 0.17%)</title><rect x="77.1" y="357" width="2.0" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="80.07" y="367.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1098.2" y="197" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1101.22" y="207.5" ></text>
</g>
<g >
<title>unw_step (2 samples, 0.09%)</title><rect x="288.9" y="293" width="1.0" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="291.86" y="303.5" ></text>
</g>
<g >
<title>arena_decay_impl.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1062.9" y="165" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1065.92" y="175.5" ></text>
</g>
<g >
<title>MemoryTracker::free(long) (14 samples, 0.60%)</title><rect x="864.7" y="325" width="7.1" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="867.74" y="335.5" ></text>
</g>
<g >
<title>extent_purge_lazy_impl.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="871.8" y="261" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="874.80" y="271.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::ManyAggregatedData, std::__1::allocator&lt;DB::ManyAggregatedData&gt; &gt;::__on_zero_shared() (3 samples, 0.13%)</title><rect x="39.8" y="389" width="1.5" height="15.0" fill="rgb(242,146,41)" rx="2" ry="2" />
<text  x="42.75" y="399.5" ></text>
</g>
<g >
<title>extent_dalloc_wrapper (1 samples, 0.04%)</title><rect x="1120.9" y="85" width="0.5" height="15.0" fill="rgb(243,145,41)" rx="2" ry="2" />
<text  x="1123.91" y="95.5" ></text>
</g>
<g >
<title>__libc_realloc (2 samples, 0.09%)</title><rect x="1081.6" y="165" width="1.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1084.58" y="175.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;4ul, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;::reserveForNextSize&lt;&gt;() (4 samples, 0.17%)</title><rect x="684.7" y="277" width="2.0" height="15.0" fill="rgb(244,131,43)" rx="2" ry="2" />
<text  x="687.72" y="287.5" ></text>
</g>
<g >
<title>DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;::insert(StringRef const&amp;) (500 samples, 21.37%)</title><rect x="430.1" y="277" width="252.1" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="433.06" y="287.5" >DB::ReverseIndex&lt;unsigned long, D..</text>
</g>
<g >
<title>DB::ConvertingAggregatedToChunksSource::generate() (1,338 samples, 57.18%)</title><rect x="385.2" y="405" width="674.7" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="388.18" y="415.5" >DB::ConvertingAggregatedToChunksSource::generate()</text>
</g>
<g >
<title>DB::MergeTreeReaderStream::getRightOffsetAndBytesRange(unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1106.3" y="213" width="0.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1109.29" y="223.5" ></text>
</g>
<g >
<title>unw_step (14 samples, 0.60%)</title><rect x="864.7" y="277" width="7.1" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="867.74" y="287.5" ></text>
</g>
<g >
<title>DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const (1 samples, 0.04%)</title><rect x="1061.9" y="197" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1064.91" y="207.5" ></text>
</g>
<g >
<title>pread64 (6 samples, 0.26%)</title><rect x="1107.8" y="149" width="3.0" height="15.0" fill="rgb(237,177,36)" rx="2" ry="2" />
<text  x="1110.80" y="159.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1096.7" y="181" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1099.71" y="191.5" ></text>
</g>
<g >
<title>DB::ThreadStatus::updatePerformanceCounters() (1 samples, 0.04%)</title><rect x="1121.9" y="325" width="0.5" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="1124.92" y="335.5" ></text>
</g>
<g >
<title>CurrentMemoryTracker::free(long) (2 samples, 0.09%)</title><rect x="895.0" y="309" width="1.0" height="15.0" fill="rgb(247,119,46)" rx="2" ry="2" />
<text  x="898.00" y="319.5" ></text>
</g>
<g >
<title>DB::ReadBuffer* std::__1::__function::__policy_invoker&lt;DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&amp;)&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;DB::MergeTreeReaderWide::readData(DB::NameAndTypePair const&amp;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;, unsigned long, bool, unsigned long, unsigned long, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;&amp;, bool)::$_3, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&amp;)&gt; &gt;(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&amp;) (2 samples, 0.09%)</title><rect x="1106.3" y="245" width="1.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1109.29" y="255.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferFromFile::nextImpl() (13 samples, 0.56%)</title><rect x="1099.2" y="245" width="6.6" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1102.23" y="255.5" ></text>
</g>
<g >
<title>madvise (1 samples, 0.04%)</title><rect x="871.8" y="229" width="0.5" height="15.0" fill="rgb(241,99,40)" rx="2" ry="2" />
<text  x="874.80" y="239.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1105.8" y="213" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1108.79" y="223.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;signed char&gt;::deserializeAndInsertFromArena(char const*) (234 samples, 10.00%)</title><rect x="686.7" y="309" width="118.0" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="689.74" y="319.5" >DB::ColumnVect..</text>
</g>
<g >
<title>DB::MergeTreeBaseSelectProcessor::readFromPart() (122 samples, 5.21%)</title><rect x="1060.9" y="373" width="61.5" height="15.0" fill="rgb(239,133,38)" rx="2" ry="2" />
<text  x="1063.91" y="383.5" >DB::Me..</text>
</g>
<g >
<title>syscall (14 samples, 0.60%)</title><rect x="864.7" y="245" width="7.1" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="867.74" y="255.5" ></text>
</g>
<g >
<title>DB::ISource::tryGenerate() (122 samples, 5.21%)</title><rect x="1060.9" y="405" width="61.5" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1063.91" y="415.5" >DB::IS..</text>
</g>
<g >
<title>void DB::Aggregator::convertToBlockImpl&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, std::__1::vector&lt;DB::PODArray&lt;char*, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;*, std::__1::allocator&lt;DB::PODArray&lt;char*, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;*&gt; &gt;&amp;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, DB::Arena*, bool) const (832 samples, 35.56%)</title><rect x="385.2" y="357" width="419.5" height="15.0" fill="rgb(237,131,35)" rx="2" ry="2" />
<text  x="388.18" y="367.5" >void DB::Aggregator::convertToBlockImpl&lt;DB::AggregationMe..</text>
</g>
<g >
<title>DB::Aggregator::executeOnBlock(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;, unsigned long, DB::AggregatedDataVariants&amp;, std::__1::vector&lt;DB::IColumn const*, std::__1::allocator&lt;DB::IColumn const*&gt; &gt;&amp;, std::__1::vector&lt;std::__1::vector&lt;DB::IColumn const*, std::__1::allocator&lt;DB::IColumn const*&gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;DB::IColumn const*, std::__1::allocator&lt;DB::IColumn const*&gt; &gt; &gt; &gt;&amp;, bool&amp;) const (609 samples, 26.03%)</title><rect x="77.1" y="405" width="307.1" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="80.07" y="415.5" >DB::Aggregator::executeOnBlock(std::__1::..</text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ManyAggregatedData&gt;::destroy(DB::ManyAggregatedData*) (3 samples, 0.13%)</title><rect x="39.8" y="373" width="1.5" height="15.0" fill="rgb(242,146,41)" rx="2" ry="2" />
<text  x="42.75" y="383.5" ></text>
</g>
<g >
<title>large_ralloc (7 samples, 0.30%)</title><rect x="657.0" y="213" width="3.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="659.98" y="223.5" ></text>
</g>
<g >
<title>DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::__1::deque&lt;DB::MarkRange, std::__1::allocator&lt;DB::MarkRange&gt; &gt;&amp;) (119 samples, 5.09%)</title><rect x="1061.4" y="325" width="60.0" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1064.41" y="335.5" >DB::Me..</text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (5 samples, 0.21%)</title><rect x="896.0" y="309" width="2.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="899.01" y="319.5" ></text>
</g>
<g >
<title>DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;::insert(StringRef const&amp;) (2 samples, 0.09%)</title><rect x="1091.7" y="165" width="1.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1094.67" y="175.5" ></text>
</g>
<g >
<title>munmap (1 samples, 0.04%)</title><rect x="40.8" y="213" width="0.5" height="15.0" fill="rgb(240,116,39)" rx="2" ry="2" />
<text  x="43.76" y="223.5" ></text>
</g>
<g >
<title>taskstats std::__1::__function::__policy_invoker&lt;taskstats ()&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;DB::TasksStatsCounters::TasksStatsCounters(unsigned long, DB::TasksStatsCounters::MetricsProvider)::$_2, taskstats ()&gt; &gt;(std::__1::__function::__policy_storage const*) (1 samples, 0.04%)</title><rect x="1121.9" y="309" width="0.5" height="15.0" fill="rgb(237,114,36)" rx="2" ry="2" />
<text  x="1124.92" y="319.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferFromFile::readBig(char*, unsigned long) (1 samples, 0.04%)</title><rect x="1113.4" y="229" width="0.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1116.35" y="239.5" ></text>
</g>
<g >
<title>madvise (1 samples, 0.04%)</title><rect x="1059.9" y="197" width="0.5" height="15.0" fill="rgb(241,99,40)" rx="2" ry="2" />
<text  x="1062.90" y="207.5" ></text>
</g>
<g >
<title>DB::PipelineExecutor::executeImpl(unsigned long) (68 samples, 2.91%)</title><rect x="1154.7" y="453" width="34.3" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1157.70" y="463.5" >DB..</text>
</g>
<g >
<title>HashTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::reinsert(HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;&amp;, unsigned long) (2 samples, 0.09%)</title><rect x="38.7" y="549" width="1.1" height="15.0" fill="rgb(247,146,46)" rx="2" ry="2" />
<text  x="41.74" y="559.5" ></text>
</g>
<g >
<title>tcache_bin_flush_small (1 samples, 0.04%)</title><rect x="75.6" y="373" width="0.5" height="15.0" fill="rgb(230,178,28)" rx="2" ry="2" />
<text  x="78.56" y="383.5" ></text>
</g>
<g >
<title>memcpy (44 samples, 1.88%)</title><rect x="344.3" y="341" width="22.2" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="347.33" y="351.5" >m..</text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::allocNoTrack(unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1062.9" y="213" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1065.92" y="223.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;1ul, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;::resize&lt;&gt;(unsigned long) (1 samples, 0.04%)</title><rect x="1062.9" y="229" width="0.5" height="15.0" fill="rgb(247,131,46)" rx="2" ry="2" />
<text  x="1065.92" y="239.5" ></text>
</g>
<g >
<title>pread64 (1 samples, 0.04%)</title><rect x="1111.3" y="165" width="0.5" height="15.0" fill="rgb(237,177,36)" rx="2" ry="2" />
<text  x="1114.33" y="175.5" ></text>
</g>
<g >
<title>DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const (9 samples, 0.38%)</title><rect x="1101.2" y="229" width="4.6" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1104.25" y="239.5" ></text>
</g>
<g >
<title>arena_decay_to_limit.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1062.9" y="133" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1065.92" y="143.5" ></text>
</g>
<g >
<title>arena_maybe_decay.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1120.9" y="117" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1123.91" y="127.5" ></text>
</g>
<g >
<title>DB::IAggregateFunctionHelper&lt;DB::AggregateFunctionCount&gt;::addBatch(unsigned long, char**, unsigned long, DB::IColumn const**, DB::Arena*, long) const (6 samples, 0.26%)</title><rect x="369.5" y="357" width="3.1" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="372.55" y="367.5" ></text>
</g>
<g >
<title>large_ralloc (52 samples, 2.22%)</title><rect x="289.9" y="309" width="26.2" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="292.87" y="319.5" >l..</text>
</g>
<g >
<title>memcpy (2 samples, 0.09%)</title><rect x="1095.7" y="117" width="1.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1098.70" y="127.5" ></text>
</g>
<g >
<title>DB::SortingTransform::work() (2 samples, 0.09%)</title><rect x="1059.9" y="437" width="1.0" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="1062.90" y="447.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::getSavedRegister(libunwind::LocalAddressSpace&amp;, libunwind::Registers_x86_64 const&amp;, unsigned long, libunwind::RegisterLocation const&amp;) (1 samples, 0.04%)</title><rect x="864.2" y="277" width="0.5" height="15.0" fill="rgb(242,129,40)" rx="2" ry="2" />
<text  x="867.24" y="287.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (1 samples, 0.04%)</title><rect x="684.7" y="181" width="0.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="687.72" y="191.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1110.8" y="181" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1113.83" y="191.5" ></text>
</g>
<g >
<title>DB::ReadBufferFromFileDescriptor::nextImpl() (6 samples, 0.26%)</title><rect x="1107.8" y="165" width="3.0" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1110.80" y="175.5" ></text>
</g>
<g >
<title>extent_dalloc_wrapper (1 samples, 0.04%)</title><rect x="1118.4" y="85" width="0.5" height="15.0" fill="rgb(243,145,41)" rx="2" ry="2" />
<text  x="1121.39" y="95.5" ></text>
</g>
<g >
<title>CurrentMemoryTracker::free(long) (2 samples, 0.09%)</title><rect x="386.2" y="325" width="1.0" height="15.0" fill="rgb(247,119,46)" rx="2" ry="2" />
<text  x="389.19" y="335.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::mapUniqueIndex(DB::IColumn&amp;) (5 samples, 0.21%)</title><rect x="1065.9" y="229" width="2.6" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1068.95" y="239.5" ></text>
</g>
<g >
<title>extent_lock2 (1 samples, 0.04%)</title><rect x="1113.9" y="117" width="0.5" height="15.0" fill="rgb(244,145,43)" rx="2" ry="2" />
<text  x="1116.85" y="127.5" ></text>
</g>
<g >
<title>unw_step (5 samples, 0.21%)</title><rect x="896.0" y="277" width="2.5" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="899.01" y="287.5" ></text>
</g>
<g >
<title>arena_decay_impl.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1120.9" y="133" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1123.91" y="143.5" ></text>
</g>
<g >
<title>arena_ralloc (1 samples, 0.04%)</title><rect x="1092.2" y="117" width="0.5" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="1095.17" y="127.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (2 samples, 0.09%)</title><rect x="656.0" y="181" width="1.0" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="658.97" y="191.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;signed char&gt;::serializeValueIntoArena(unsigned long, DB::Arena&amp;, char const*&amp;) const (2 samples, 0.09%)</title><rect x="33.7" y="549" width="1.0" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="36.70" y="559.5" ></text>
</g>
<g >
<title>bool LZ4::(anonymous namespace)::decompressImpl&lt;16ul, false&gt;(char const*, char*, unsigned long, unsigned long) (.llvm.5035804696300559578) (1 samples, 0.04%)</title><rect x="1101.2" y="181" width="0.6" height="15.0" fill="rgb(247,151,46)" rx="2" ry="2" />
<text  x="1104.25" y="191.5" ></text>
</g>
<g >
<title>large_palloc (1 samples, 0.04%)</title><rect x="1113.9" y="197" width="0.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1116.85" y="207.5" ></text>
</g>
<g >
<title>DB::LazyOutputFormat::getChunk(unsigned long) (68 samples, 2.91%)</title><rect x="41.3" y="373" width="34.3" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="44.26" y="383.5" >DB..</text>
</g>
<g >
<title>DB::ReadBufferFromFileDecorator::nextImpl() (6 samples, 0.26%)</title><rect x="1107.8" y="181" width="3.0" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1110.80" y="191.5" ></text>
</g>
<g >
<title>DB::ExecutorTasks::processAsyncTasks() (68 samples, 2.91%)</title><rect x="1154.7" y="437" width="34.3" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="1157.70" y="447.5" >DB..</text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned short&gt;::~ColumnVector() (1 samples, 0.04%)</title><rect x="1084.6" y="229" width="0.5" height="15.0" fill="rgb(241,133,40)" rx="2" ry="2" />
<text  x="1087.61" y="239.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::CityHash128WithSeed(char const*, unsigned long, std::__1::pair&lt;unsigned long, unsigned long&gt;) (3 samples, 0.13%)</title><rect x="1099.2" y="213" width="1.5" height="15.0" fill="rgb(240,117,39)" rx="2" ry="2" />
<text  x="1102.23" y="223.5" ></text>
</g>
<g >
<title>DB::MergeSorter::read() (2 samples, 0.09%)</title><rect x="1059.9" y="389" width="1.0" height="15.0" fill="rgb(242,133,41)" rx="2" ry="2" />
<text  x="1062.90" y="399.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::mapUniqueIndex(DB::IColumn&amp;) (1 samples, 0.04%)</title><rect x="1085.1" y="197" width="0.5" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1088.11" y="207.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::selectIndexImpl&lt;DB::ColumnString&gt;(DB::ColumnString const&amp;, DB::IColumn const&amp;, unsigned long) (2 samples, 0.09%)</title><rect x="1068.5" y="213" width="1.0" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1071.47" y="223.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free(void*, unsigned long) (1 samples, 0.04%)</title><rect x="1060.4" y="309" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1063.40" y="319.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;unsigned short&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;unsigned short&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long) (2 samples, 0.09%)</title><rect x="1069.5" y="181" width="1.0" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1072.48" y="191.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.09%)</title><rect x="656.0" y="165" width="1.0" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="658.97" y="175.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::selectIndexImpl&lt;DB::ColumnString&gt;(DB::ColumnString const&amp;, DB::IColumn const&amp;, unsigned long) (1 samples, 0.04%)</title><rect x="1085.6" y="181" width="0.5" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1088.62" y="191.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderWide::readRows(unsigned long, unsigned long, bool, unsigned long, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;) (119 samples, 5.09%)</title><rect x="1061.4" y="293" width="60.0" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1064.41" y="303.5" >DB::Me..</text>
</g>
<g >
<title>__libc_realloc (1 samples, 0.04%)</title><rect x="1092.2" y="133" width="0.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1095.17" y="143.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (26 samples, 1.11%)</title><rect x="888.9" y="341" width="13.2" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="891.95" y="351.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::ColumnString::indexImpl&lt;unsigned short&gt;(DB::PODArray&lt;unsigned short, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, unsigned long) const (2 samples, 0.09%)</title><rect x="1068.5" y="197" width="1.0" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="1071.47" y="207.5" ></text>
</g>
<g >
<title>large_palloc (1 samples, 0.04%)</title><rect x="1118.4" y="149" width="0.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1121.39" y="159.5" ></text>
</g>
<g >
<title>extent_purge_lazy_default.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="871.8" y="245" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="874.80" y="255.5" ></text>
</g>
<g >
<title>DB::sortBlock(DB::Block&amp;, std::__1::vector&lt;DB::SortColumnDescription, std::__1::allocator&lt;DB::SortColumnDescription&gt; &gt; const&amp;, unsigned long) (2 samples, 0.09%)</title><rect x="384.2" y="389" width="1.0" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="387.17" y="399.5" ></text>
</g>
<g >
<title>DB::ColumnString::~ColumnString() (1 samples, 0.04%)</title><rect x="1086.1" y="197" width="0.5" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="1089.12" y="207.5" ></text>
</g>
<g >
<title>arena_decay_to_limit.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1118.4" y="101" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1121.39" y="111.5" ></text>
</g>
<g >
<title>DB::EnumValues&lt;signed char&gt;::fillMaps() (1 samples, 0.04%)</title><rect x="1061.4" y="213" width="0.5" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="1064.41" y="223.5" ></text>
</g>
<g >
<title>void DB::Aggregator::createAggregateStates&lt;false&gt;(char*&amp;) const (2 samples, 0.09%)</title><rect x="383.2" y="357" width="1.0" height="15.0" fill="rgb(237,131,35)" rx="2" ry="2" />
<text  x="386.16" y="367.5" ></text>
</g>
<g >
<title>arena_decay_to_limit.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="871.8" y="277" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="874.80" y="287.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::writeTraceInfo(DB::TraceType, int, siginfo_t*, void*) (27 samples, 1.15%)</title><rect x="10.0" y="533" width="13.6" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>unw_step (1 samples, 0.04%)</title><rect x="79.1" y="293" width="0.5" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="82.09" y="303.5" ></text>
</g>
<g >
<title>DB::PullingAsyncPipelineExecutor::pull(DB::Block&amp;, unsigned long) (68 samples, 2.91%)</title><rect x="41.3" y="405" width="34.3" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="44.26" y="415.5" >DB..</text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1090.7" y="117" width="1.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1093.66" y="127.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (4 samples, 0.17%)</title><rect x="77.1" y="373" width="2.0" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="80.07" y="383.5" ></text>
</g>
<g >
<title>DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const (3 samples, 0.13%)</title><rect x="1111.8" y="213" width="1.6" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1114.84" y="223.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::Index::getSizeOfIndexType(DB::IColumn const&amp;, unsigned long) (3 samples, 0.13%)</title><rect x="424.0" y="277" width="1.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="427.01" y="287.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::compactInplace() (13 samples, 0.56%)</title><rect x="1085.1" y="229" width="6.6" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1088.11" y="239.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (1 samples, 0.04%)</title><rect x="663.5" y="181" width="0.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="666.54" y="191.5" ></text>
</g>
<g >
<title>arena_decay_to_limit.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="75.6" y="309" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="78.56" y="319.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (5 samples, 0.21%)</title><rect x="662.5" y="261" width="2.6" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="665.53" y="271.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (2 samples, 0.09%)</title><rect x="656.0" y="245" width="1.0" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="658.97" y="255.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::allocNoTrack(unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="655.0" y="245" width="1.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="657.97" y="255.5" ></text>
</g>
<g >
<title>arena_decay_impl.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1118.4" y="133" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1121.39" y="143.5" ></text>
</g>
<g >
<title>libunwind::CFI_Parser&lt;libunwind::LocalAddressSpace&gt;::decodeFDE(libunwind::LocalAddressSpace&amp;, unsigned long, libunwind::CFI_Parser&lt;libunwind::LocalAddressSpace&gt;::FDE_Info*, libunwind::CFI_Parser&lt;libunwind::LocalAddressSpace&gt;::CIE_Info*) (1 samples, 0.04%)</title><rect x="78.6" y="277" width="0.5" height="15.0" fill="rgb(241,129,39)" rx="2" ry="2" />
<text  x="81.58" y="287.5" ></text>
</g>
<g >
<title>extent_purge_forced_default.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1062.9" y="101" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1065.92" y="111.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::freeNoTrack(void*, unsigned long) (2 samples, 0.09%)</title><rect x="385.2" y="325" width="1.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="388.18" y="335.5" ></text>
</g>
<g >
<title>DB::MergeTreeRangeReader::read(unsigned long, std::__1::deque&lt;DB::MarkRange, std::__1::allocator&lt;DB::MarkRange&gt; &gt;&amp;) (120 samples, 5.13%)</title><rect x="1060.9" y="341" width="60.5" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1063.91" y="351.5" >DB::Me..</text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;char8_t&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;char8_t&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long)::\'lambda\'(unsigned long&amp;)::operator()(unsigned long&amp;) const (10 samples, 0.43%)</title><rect x="1086.6" y="165" width="5.1" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="1089.62" y="175.5" ></text>
</g>
<g >
<title>unw_backtrace (2 samples, 0.09%)</title><rect x="78.1" y="341" width="1.0" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="81.08" y="351.5" ></text>
</g>
<g >
<title>DB::ReadBufferFromFileDecorator::nextImpl() (1 samples, 0.04%)</title><rect x="1100.7" y="213" width="0.5" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1103.74" y="223.5" ></text>
</g>
<g >
<title>DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeFrom(DB::IColumn const&amp;, unsigned long, unsigned long) (11 samples, 0.47%)</title><rect x="1091.7" y="229" width="5.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1094.67" y="239.5" ></text>
</g>
<g >
<title>large_ralloc (2 samples, 0.09%)</title><rect x="1081.6" y="133" width="1.0" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1084.58" y="143.5" ></text>
</g>
<g >
<title>DB::TCPHandler::sendProfileEvents() (1 samples, 0.04%)</title><rect x="75.6" y="405" width="0.5" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="78.56" y="415.5" ></text>
</g>
<g >
<title>unw_backtrace (14 samples, 0.60%)</title><rect x="864.7" y="293" width="7.1" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="867.74" y="303.5" ></text>
</g>
<g >
<title>arena_ralloc (7 samples, 0.30%)</title><rect x="657.0" y="229" width="3.5" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="659.98" y="239.5" ></text>
</g>
<g >
<title>MemoryTracker::free(long) (2 samples, 0.09%)</title><rect x="386.2" y="309" width="1.0" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="389.19" y="319.5" ></text>
</g>
<g >
<title>DB::ReadBuffer::readStrict(char*, unsigned long) (7 samples, 0.30%)</title><rect x="1107.8" y="197" width="3.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1110.80" y="207.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.09%)</title><rect x="895.0" y="213" width="1.0" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="898.00" y="223.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::free(void*, unsigned long) (2 samples, 0.09%)</title><rect x="895.0" y="325" width="1.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="898.00" y="335.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::insertRangeFrom(DB::IColumn const&amp;, unsigned long, unsigned long) (38 samples, 1.62%)</title><rect x="1065.9" y="245" width="19.2" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1068.95" y="255.5" ></text>
</g>
<g >
<title>LZ4::decompress(char const*, char*, unsigned long, unsigned long, LZ4::PerformanceStatistics&amp;) (3 samples, 0.13%)</title><rect x="1111.8" y="181" width="1.6" height="15.0" fill="rgb(242,158,41)" rx="2" ry="2" />
<text  x="1114.84" y="191.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::Dictionary::compact(COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;) (13 samples, 0.56%)</title><rect x="1085.1" y="213" width="6.6" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1088.11" y="223.5" ></text>
</g>
<g >
<title>MemoryTracker::free(long) (2 samples, 0.09%)</title><rect x="895.0" y="293" width="1.0" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="898.00" y="303.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (1 samples, 0.04%)</title><rect x="663.5" y="229" width="0.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="666.54" y="239.5" ></text>
</g>
<g >
<title>munmap (1 samples, 0.04%)</title><rect x="39.8" y="261" width="0.5" height="15.0" fill="rgb(240,116,39)" rx="2" ry="2" />
<text  x="42.75" y="271.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::ColumnString::indexImpl&lt;unsigned short&gt;(DB::PODArray&lt;unsigned short, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, unsigned long) const (46 samples, 1.97%)</title><rect x="80.1" y="341" width="23.2" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="83.09" y="351.5" >C..</text>
</g>
<g >
<title>DB::PartialSortingTransform::transform(DB::Chunk&amp;) (2 samples, 0.09%)</title><rect x="384.2" y="405" width="1.0" height="15.0" fill="rgb(240,133,38)" rx="2" ry="2" />
<text  x="387.17" y="415.5" ></text>
</g>
<g >
<title>arena_maybe_decay.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="75.6" y="325" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="78.56" y="335.5" ></text>
</g>
<g >
<title>DB::TCPHandler::runImpl() (72 samples, 3.08%)</title><rect x="39.8" y="437" width="36.3" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="42.75" y="447.5" >DB:..</text>
</g>
<g >
<title>large_palloc (1 samples, 0.04%)</title><rect x="289.9" y="293" width="0.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="292.87" y="303.5" ></text>
</g>
<g >
<title>memcpy (2 samples, 0.09%)</title><rect x="1080.1" y="117" width="1.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1083.07" y="127.5" ></text>
</g>
<g >
<title>arena_decay_impl.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1118.9" y="117" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1121.90" y="127.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1080.1" y="181" width="1.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1083.07" y="191.5" ></text>
</g>
<g >
<title>memcpy (2 samples, 0.09%)</title><rect x="1081.6" y="117" width="1.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1084.58" y="127.5" ></text>
</g>
<g >
<title>pthread_cond_wait (64 samples, 2.74%)</title><rect x="1122.4" y="437" width="32.3" height="15.0" fill="rgb(237,158,35)" rx="2" ry="2" />
<text  x="1125.43" y="447.5" >pt..</text>
</g>
<g >
<title>__libc_realloc (6 samples, 0.26%)</title><rect x="1118.4" y="197" width="3.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1121.39" y="207.5" ></text>
</g>
<g >
<title>DB::CompressionCodecLZ4::doDecompressData(char const*, unsigned int, char*, unsigned int) const (9 samples, 0.38%)</title><rect x="1101.2" y="213" width="4.6" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1104.25" y="223.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::freeNoTrack(void*, unsigned long) (1 samples, 0.04%)</title><rect x="40.8" y="229" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="43.76" y="239.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::insertRangeFromDictionaryEncodedColumn(DB::IColumn const&amp;, DB::IColumn const&amp;) (24 samples, 1.03%)</title><rect x="1085.1" y="245" width="12.1" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1088.11" y="255.5" ></text>
</g>
<g >
<title>madvise (1 samples, 0.04%)</title><rect x="1120.9" y="53" width="0.5" height="15.0" fill="rgb(241,99,40)" rx="2" ry="2" />
<text  x="1123.91" y="63.5" ></text>
</g>
<g >
<title>DB::ColumnString::index(DB::IColumn const&amp;, unsigned long) const (1 samples, 0.04%)</title><rect x="1085.6" y="197" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1088.62" y="207.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free(void*, unsigned long) (1 samples, 0.04%)</title><rect x="1084.6" y="213" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1087.61" y="223.5" ></text>
</g>
<g >
<title>DB::ISimpleTransform::transform(DB::Chunk&amp;, DB::Chunk&amp;) (2 samples, 0.09%)</title><rect x="384.2" y="421" width="1.0" height="15.0" fill="rgb(240,133,38)" rx="2" ry="2" />
<text  x="387.17" y="431.5" ></text>
</g>
<g >
<title>DB::AggregatingTransform::~AggregatingTransform() (3 samples, 0.13%)</title><rect x="39.8" y="405" width="1.5" height="15.0" fill="rgb(244,133,43)" rx="2" ry="2" />
<text  x="42.75" y="415.5" ></text>
</g>
<g >
<title>unw_backtrace (1 samples, 0.04%)</title><rect x="663.5" y="213" width="0.5" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="666.54" y="223.5" ></text>
</g>
<g >
<title>bool LZ4::(anonymous namespace)::decompressImpl&lt;32ul, false&gt;(char const*, char*, unsigned long, unsigned long) (.llvm.5035804696300559578) (2 samples, 0.09%)</title><rect x="1104.8" y="181" width="1.0" height="15.0" fill="rgb(247,151,46)" rx="2" ry="2" />
<text  x="1107.78" y="191.5" ></text>
</g>
<g >
<title>arena_ralloc (6 samples, 0.26%)</title><rect x="1118.4" y="181" width="3.0" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="1121.39" y="191.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1082.6" y="181" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1085.59" y="191.5" ></text>
</g>
<g >
<title>memcpy (51 samples, 2.18%)</title><rect x="290.4" y="293" width="25.7" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="293.38" y="303.5" >m..</text>
</g>
<g >
<title>DB::Aggregator::checkLimits(unsigned long, bool&amp;) const (4 samples, 0.17%)</title><rect x="77.1" y="389" width="2.0" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="80.07" y="399.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferFromFile::nextImpl() (1 samples, 0.04%)</title><rect x="1061.9" y="213" width="0.5" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1064.91" y="223.5" ></text>
</g>
<g >
<title>DB::ColumnString::~ColumnString() (1 samples, 0.04%)</title><rect x="1060.4" y="325" width="0.5" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="1063.40" y="335.5" ></text>
</g>
<g >
<title>large_ralloc (3 samples, 0.13%)</title><rect x="685.2" y="213" width="1.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="688.22" y="223.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;signed char&gt;::serializeValueIntoArena(unsigned long, DB::Arena&amp;, char const*&amp;) const (6 samples, 0.26%)</title><rect x="366.5" y="357" width="3.0" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="369.52" y="367.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::allocNoTrack(unsigned long, unsigned long) (5 samples, 0.21%)</title><rect x="892.5" y="325" width="2.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="895.48" y="335.5" ></text>
</g>
<g >
<title>unw_step (1 samples, 0.04%)</title><rect x="864.2" y="309" width="0.5" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="867.24" y="319.5" ></text>
</g>
<g >
<title>large_ralloc (6 samples, 0.26%)</title><rect x="1118.4" y="165" width="3.0" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1121.39" y="175.5" ></text>
</g>
<g >
<title>madvise (1 samples, 0.04%)</title><rect x="1118.4" y="53" width="0.5" height="15.0" fill="rgb(241,99,40)" rx="2" ry="2" />
<text  x="1121.39" y="63.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::free(void*, unsigned long) (1 samples, 0.04%)</title><rect x="1059.9" y="325" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1062.90" y="335.5" ></text>
</g>
<g >
<title>tcache_bin_flush_large (1 samples, 0.04%)</title><rect x="1120.9" y="149" width="0.5" height="15.0" fill="rgb(244,178,43)" rx="2" ry="2" />
<text  x="1123.91" y="159.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (2 samples, 0.09%)</title><rect x="288.9" y="277" width="1.0" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="291.86" y="287.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (15 samples, 0.64%)</title><rect x="655.0" y="261" width="7.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="657.97" y="271.5" ></text>
</g>
<g >
<title>unw_step (2 samples, 0.09%)</title><rect x="656.0" y="197" width="1.0" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="658.97" y="207.5" ></text>
</g>
<g >
<title>MemoryTracker::free(long) (1 samples, 0.04%)</title><rect x="79.1" y="341" width="0.5" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="82.09" y="351.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (2 samples, 0.09%)</title><rect x="288.9" y="325" width="1.0" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="291.86" y="335.5" ></text>
</g>
<g >
<title>__libc_realloc (2 samples, 0.09%)</title><rect x="1090.7" y="101" width="1.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1093.66" y="111.5" ></text>
</g>
<g >
<title>malloc_default (1 samples, 0.04%)</title><rect x="1113.9" y="213" width="0.5" height="15.0" fill="rgb(228,112,25)" rx="2" ry="2" />
<text  x="1116.85" y="223.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="1069.0" y="181" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1071.97" y="191.5" ></text>
</g>
<g >
<title>extent_purge_lazy_impl.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1118.9" y="69" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1121.90" y="79.5" ></text>
</g>
<g >
<title>ThreadPoolImpl&lt;std::__1::thread&gt;::worker(std::__1::__list_iterator&lt;std::__1::thread, void*&gt;) (2,207 samples, 94.32%)</title><rect x="76.1" y="501" width="1112.9" height="15.0" fill="rgb(241,153,40)" rx="2" ry="2" />
<text  x="79.06" y="511.5" >ThreadPoolImpl&lt;std::__1::thread&gt;::worker(std::__1::__list_iterator&lt;std::__1::thread, void*&gt;)</text>
</g>
<g >
<title>extent_purge_forced_default.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1118.4" y="69" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1121.39" y="79.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (3 samples, 0.13%)</title><rect x="1081.1" y="181" width="1.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1084.08" y="191.5" ></text>
</g>
<g >
<title>DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;::insert(StringRef const&amp;) (8 samples, 0.34%)</title><rect x="1093.2" y="197" width="4.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1096.18" y="207.5" ></text>
</g>
<g >
<title>libunwind::UnwindCursor&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::getInfoFromDwarfSection(unsigned long, libunwind::UnwindInfoSections const&amp;, unsigned int) (1 samples, 0.04%)</title><rect x="78.6" y="293" width="0.5" height="15.0" fill="rgb(245,129,44)" rx="2" ry="2" />
<text  x="81.58" y="303.5" ></text>
</g>
<g >
<title>DB::ColumnString::index(DB::IColumn const&amp;, unsigned long) const (3 samples, 0.13%)</title><rect x="1097.2" y="245" width="1.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1100.21" y="255.5" ></text>
</g>
<g >
<title>large_ralloc (2 samples, 0.09%)</title><rect x="1095.7" y="133" width="1.0" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1098.70" y="143.5" ></text>
</g>
<g >
<title>DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertData(char const*, unsigned long) (503 samples, 21.50%)</title><rect x="428.5" y="293" width="253.7" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="431.55" y="303.5" >DB::ColumnUnique&lt;DB::ColumnString..</text>
</g>
<g >
<title>DB::ColumnUnique&lt;DB::ColumnString&gt;::updateNullMask() (2 samples, 0.09%)</title><rect x="32.7" y="549" width="1.0" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="35.69" y="559.5" ></text>
</g>
<g >
<title>DB::IndexesSerializationType::deserialize(DB::ReadBuffer&amp;, DB::ISerialization::DeserializeBinaryBulkSettings const&amp;) (1 samples, 0.04%)</title><rect x="1105.8" y="245" width="0.5" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1108.79" y="255.5" ></text>
</g>
<g >
<title>large_dalloc (1 samples, 0.04%)</title><rect x="871.8" y="341" width="0.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="874.80" y="351.5" ></text>
</g>
<g >
<title>DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&amp;, unsigned long) (68 samples, 2.91%)</title><rect x="41.3" y="389" width="34.3" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="44.26" y="399.5" >DB..</text>
</g>
<g >
<title>DB::MergeSortingTransform::consume(DB::Chunk) (2 samples, 0.09%)</title><rect x="1059.9" y="421" width="1.0" height="15.0" fill="rgb(243,133,41)" rx="2" ry="2" />
<text  x="1062.90" y="431.5" ></text>
</g>
<g >
<title>__libc_realloc (3 samples, 0.13%)</title><rect x="685.2" y="245" width="1.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="688.22" y="255.5" ></text>
</g>
<g >
<title>DB::ReadBufferFromFileDescriptor::nextImpl() (1 samples, 0.04%)</title><rect x="1111.3" y="181" width="0.5" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1114.33" y="191.5" ></text>
</g>
<g >
<title>memcpy (2 samples, 0.09%)</title><rect x="1064.9" y="149" width="1.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1067.94" y="159.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (1 samples, 0.04%)</title><rect x="663.5" y="245" width="0.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="666.54" y="255.5" ></text>
</g>
<g >
<title>extent_dalloc_wrapper (1 samples, 0.04%)</title><rect x="1062.9" y="117" width="0.5" height="15.0" fill="rgb(243,145,41)" rx="2" ry="2" />
<text  x="1065.92" y="127.5" ></text>
</g>
<g >
<title>large_palloc (1 samples, 0.04%)</title><rect x="1062.9" y="181" width="0.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1065.92" y="191.5" ></text>
</g>
<g >
<title>DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeFrom(DB::IColumn const&amp;, unsigned long, unsigned long) (10 samples, 0.43%)</title><rect x="1086.6" y="197" width="5.1" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1089.62" y="207.5" ></text>
</g>
<g >
<title>unw_backtrace (1 samples, 0.04%)</title><rect x="684.7" y="213" width="0.5" height="15.0" fill="rgb(252,138,52)" rx="2" ry="2" />
<text  x="687.72" y="223.5" ></text>
</g>
<g >
<title>arena_decay_impl.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="871.8" y="309" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="874.80" y="319.5" ></text>
</g>
<g >
<title>libunwind::CFI_Parser&lt;libunwind::LocalAddressSpace&gt;::parseInstructions(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::CFI_Parser&lt;libunwind::LocalAddressSpace&gt;::CIE_Info const&amp;, unsigned long, libunwind::PrologInfoStackEntry*&amp;, int, libunwind::PrologInfo*, libunwind::StackGuard&amp;) (1 samples, 0.04%)</title><rect x="78.1" y="293" width="0.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="81.08" y="303.5" ></text>
</g>
<g >
<title>Poco::Net::TCPServerDispatcher::run() (72 samples, 3.08%)</title><rect x="39.8" y="485" width="36.3" height="15.0" fill="rgb(244,215,43)" rx="2" ry="2" />
<text  x="42.75" y="495.5" >Poc..</text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;unsigned short&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;unsigned short&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long) (9 samples, 0.38%)</title><rect x="1092.7" y="213" width="4.5" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1095.68" y="223.5" ></text>
</g>
<g >
<title>DB::Epoll::getManyReady(int, epoll_event*, bool) const (68 samples, 2.91%)</title><rect x="1154.7" y="405" width="34.3" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1157.70" y="415.5" >DB..</text>
</g>
<g >
<title>extent_recycle.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1113.9" y="165" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1116.85" y="175.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned int&gt;::insert(DB::Field const&amp;) (1 samples, 0.04%)</title><rect x="34.7" y="549" width="0.5" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="37.71" y="559.5" ></text>
</g>
<g >
<title>__libc_realloc (52 samples, 2.22%)</title><rect x="289.9" y="341" width="26.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="292.87" y="351.5" >_..</text>
</g>
<g >
<title>DB::ColumnLowCardinality::deserializeAndInsertFromArena(char const*) (1 samples, 0.04%)</title><rect x="26.1" y="549" width="0.5" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="29.14" y="559.5" ></text>
</g>
<g >
<title>DB::SerializationLowCardinality::deserializeBinaryBulkWithMultipleStreams(COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&amp;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt;&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;*) const (115 samples, 4.91%)</title><rect x="1063.4" y="261" width="58.0" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1066.43" y="271.5" >DB::Se..</text>
</g>
<g >
<title>DB::ColumnString::~ColumnString() (1 samples, 0.04%)</title><rect x="79.1" y="389" width="0.5" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="82.09" y="399.5" ></text>
</g>
<g >
<title>arena_ralloc (2 samples, 0.09%)</title><rect x="1064.9" y="181" width="1.0" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="1067.94" y="191.5" ></text>
</g>
<g >
<title>arena_decay (1 samples, 0.04%)</title><rect x="1059.9" y="293" width="0.5" height="15.0" fill="rgb(241,137,39)" rx="2" ry="2" />
<text  x="1062.90" y="303.5" ></text>
</g>
<g >
<title>mremap (1 samples, 0.04%)</title><rect x="901.6" y="325" width="0.5" height="15.0" fill="rgb(240,121,39)" rx="2" ry="2" />
<text  x="904.56" y="335.5" ></text>
</g>
<g >
<title>LZ4::decompress(char const*, char*, unsigned long, unsigned long, LZ4::PerformanceStatistics&amp;) (9 samples, 0.38%)</title><rect x="1101.2" y="197" width="4.6" height="15.0" fill="rgb(242,158,41)" rx="2" ry="2" />
<text  x="1104.25" y="207.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;char8_t&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;char8_t&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long) (2 samples, 0.09%)</title><rect x="1091.7" y="213" width="1.0" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1094.67" y="223.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::writeTraceInfo(DB::TraceType, int, siginfo_t*, void*) (1 samples, 0.04%)</title><rect x="864.2" y="341" width="0.5" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="867.24" y="351.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::Index::insertPositionsRange(DB::IColumn const&amp;, unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1064.9" y="245" width="1.0" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1067.94" y="255.5" ></text>
</g>
<g >
<title>CurrentMemoryTracker::free(long) (1 samples, 0.04%)</title><rect x="79.1" y="357" width="0.5" height="15.0" fill="rgb(247,119,46)" rx="2" ry="2" />
<text  x="82.09" y="367.5" ></text>
</g>
<g >
<title>DB::Arena::MemoryChunk::~MemoryChunk() (3 samples, 0.13%)</title><rect x="39.8" y="309" width="1.5" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="42.75" y="319.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;unsigned short&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;unsigned short&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long)::\'lambda\'(unsigned long&amp;)::operator()(unsigned long&amp;) const (1 samples, 0.04%)</title><rect x="23.6" y="549" width="0.5" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="26.62" y="559.5" ></text>
</g>
<g >
<title>CurrentMemoryTracker::free(long) (14 samples, 0.60%)</title><rect x="864.7" y="341" width="7.1" height="15.0" fill="rgb(247,119,46)" rx="2" ry="2" />
<text  x="867.74" y="351.5" ></text>
</g>
<g >
<title>DB::AggregatedDataVariants::~AggregatedDataVariants() (3 samples, 0.13%)</title><rect x="39.8" y="357" width="1.5" height="15.0" fill="rgb(240,133,39)" rx="2" ry="2" />
<text  x="42.75" y="367.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy_invoker&lt;void ()&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;ThreadFromGlobalPool::ThreadFromGlobalPool&lt;DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&amp;, unsigned long)::$_0&gt;(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&amp;, unsigned long)::$_0&amp;&amp;)::\'lambda\'(), void ()&gt; &gt;(std::__1::__function::__policy_storage const*) (68 samples, 2.91%)</title><rect x="1154.7" y="485" width="34.3" height="15.0" fill="rgb(237,131,36)" rx="2" ry="2" />
<text  x="1157.70" y="495.5" >vo..</text>
</g>
<g >
<title>DB::SerializationNumber&lt;unsigned short&gt;::deserializeBinaryBulk(DB::IColumn&amp;, DB::ReadBuffer&amp;, unsigned long, double) const (1 samples, 0.04%)</title><rect x="1113.4" y="245" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1116.35" y="255.5" ></text>
</g>
<g >
<title> (1 samples, 0.04%)</title><rect x="864.2" y="357" width="0.5" height="15.0" fill="rgb(255,230,55)" rx="2" ry="2" />
<text  x="867.24" y="367.5" ></text>
</g>
<g >
<title>memcpy (2 samples, 0.09%)</title><rect x="664.0" y="197" width="1.1" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="667.04" y="207.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (105 samples, 4.49%)</title><rect x="263.1" y="357" width="53.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="266.15" y="367.5" >Alloc..</text>
</g>
<g >
<title>arena_decay_impl.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="75.6" y="341" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="78.56" y="351.5" ></text>
</g>
<g >
<title>HashTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::reinsert(HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;&amp;, unsigned long) (313 samples, 13.38%)</title><rect x="902.1" y="341" width="157.8" height="15.0" fill="rgb(247,146,46)" rx="2" ry="2" />
<text  x="905.06" y="351.5" >HashTable&lt;StringRef,..</text>
</g>
<g >
<title>malloc_default (1 samples, 0.04%)</title><rect x="1062.9" y="197" width="0.5" height="15.0" fill="rgb(228,112,25)" rx="2" ry="2" />
<text  x="1065.92" y="207.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferBase::readCompressedData(unsigned long&amp;, unsigned long&amp;, bool) (4 samples, 0.17%)</title><rect x="1099.2" y="229" width="2.0" height="15.0" fill="rgb(241,133,39)" rx="2" ry="2" />
<text  x="1102.23" y="239.5" ></text>
</g>
<g >
<title>Poco::PooledThread::run() (72 samples, 3.08%)</title><rect x="39.8" y="501" width="36.3" height="15.0" fill="rgb(244,215,43)" rx="2" ry="2" />
<text  x="42.75" y="511.5" >Poc..</text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::ColumnString::indexImpl&lt;unsigned short&gt;(DB::PODArray&lt;unsigned short, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, unsigned long) const (1 samples, 0.04%)</title><rect x="1085.6" y="165" width="0.5" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="1088.62" y="175.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;unsigned short&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;unsigned short&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long) (25 samples, 1.07%)</title><rect x="1070.5" y="213" width="12.6" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1073.49" y="223.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (1 samples, 0.04%)</title><rect x="384.2" y="325" width="0.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="387.17" y="335.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (2 samples, 0.09%)</title><rect x="895.0" y="229" width="1.0" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="898.00" y="239.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::selectIndexImpl&lt;DB::ColumnString&gt;(DB::ColumnString const&amp;, DB::IColumn const&amp;, unsigned long) (47 samples, 2.01%)</title><rect x="79.6" y="357" width="23.7" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="82.59" y="367.5" >C..</text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::allocNoTrack(unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1113.9" y="229" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1116.85" y="239.5" ></text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (5 samples, 0.21%)</title><rect x="896.0" y="261" width="2.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="899.01" y="271.5" ></text>
</g>
<g >
<title>large_ralloc (2 samples, 0.09%)</title><rect x="1064.9" y="165" width="1.0" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1067.94" y="175.5" ></text>
</g>
<g >
<title>large_ralloc (1 samples, 0.04%)</title><rect x="1092.2" y="101" width="0.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1095.17" y="111.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;char8_t&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;char8_t&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long)::\'lambda\'(unsigned long&amp;)::operator()(unsigned long&amp;) const (2 samples, 0.09%)</title><rect x="1091.7" y="197" width="1.0" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="1094.67" y="207.5" ></text>
</g>
<g >
<title>DB::Aggregator::mergeAndConvertOneBucketToBlock(std::__1::vector&lt;std::__1::shared_ptr&lt;DB::AggregatedDataVariants&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::AggregatedDataVariants&gt; &gt; &gt;&amp;, DB::Arena*, bool, unsigned long, std::__1::atomic&lt;bool&gt;*) const (1,338 samples, 57.18%)</title><rect x="385.2" y="389" width="674.7" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="388.18" y="399.5" >DB::Aggregator::mergeAndConvertOneBucketToBlock(std::__1::vector&lt;std::__1::shared_ptr&lt;DB::Agg..</text>
</g>
<g >
<title>DB::PollingQueue::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (68 samples, 2.91%)</title><rect x="1154.7" y="421" width="34.3" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="1157.70" y="431.5" >DB..</text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (1 samples, 0.04%)</title><rect x="77.6" y="341" width="0.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="80.57" y="351.5" ></text>
</g>
<g >
<title>LZ4::decompress(char const*, char*, unsigned long, unsigned long, LZ4::PerformanceStatistics&amp;) (1 samples, 0.04%)</title><rect x="1061.9" y="165" width="0.5" height="15.0" fill="rgb(242,158,41)" rx="2" ry="2" />
<text  x="1064.91" y="175.5" ></text>
</g>
<g >
<title>memcpy (3 samples, 0.13%)</title><rect x="685.2" y="197" width="1.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="688.22" y="207.5" ></text>
</g>
<g >
<title>arena_maybe_decay.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1118.4" y="117" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1121.39" y="127.5" ></text>
</g>
<g >
<title>arena_ralloc (2 samples, 0.09%)</title><rect x="664.0" y="229" width="1.1" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="667.04" y="239.5" ></text>
</g>
<g >
<title>DB::MergeSortingTransform::remerge() (2 samples, 0.09%)</title><rect x="1059.9" y="405" width="1.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="1062.90" y="415.5" ></text>
</g>
<g >
<title>all (2,340 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(255,230,55)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderWide::readData(DB::NameAndTypePair const&amp;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;, unsigned long, bool, unsigned long, unsigned long, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;&amp;, bool) (118 samples, 5.04%)</title><rect x="1061.9" y="277" width="59.5" height="15.0" fill="rgb(241,133,39)" rx="2" ry="2" />
<text  x="1064.91" y="287.5" >DB::Me..</text>
</g>
<g >
<title>DB::AggregateFunctionCount::merge(char*, char const*, DB::Arena*) const (1 samples, 0.04%)</title><rect x="872.3" y="357" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="875.31" y="367.5" ></text>
</g>
<g >
<title>extent_purge_lazy_impl.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1059.9" y="229" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1062.90" y="239.5" ></text>
</g>
<g >
<title>void DB::Aggregator::executeImpl&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, DB::Arena*, unsigned long, std::__1::vector&lt;DB::IColumn const*, std::__1::allocator&lt;DB::IColumn const*&gt; &gt;&amp;, DB::Aggregator::AggregateFunctionInstruction*, bool, char*) const (557 samples, 23.80%)</title><rect x="103.3" y="389" width="280.9" height="15.0" fill="rgb(237,131,35)" rx="2" ry="2" />
<text  x="106.29" y="399.5" >void DB::Aggregator::executeImpl&lt;DB::..</text>
</g>
<g >
<title>bool LZ4::(anonymous namespace)::decompressImpl&lt;16ul, true&gt;(char const*, char*, unsigned long, unsigned long) (.llvm.5035804696300559578) (6 samples, 0.26%)</title><rect x="1101.8" y="181" width="3.0" height="15.0" fill="rgb(247,151,46)" rx="2" ry="2" />
<text  x="1104.75" y="191.5" ></text>
</g>
<g >
<title>DB::ColumnString::index(DB::IColumn const&amp;, unsigned long) const (2 samples, 0.09%)</title><rect x="1068.5" y="229" width="1.0" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1071.47" y="239.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueInsertRangeImpl&lt;char8_t&gt;(DB::IColumn const&amp;, unsigned long, unsigned long, unsigned long, DB::ColumnVector&lt;char8_t&gt;::MutablePtr&amp;&amp;, DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;*, unsigned long) (2 samples, 0.09%)</title><rect x="1069.5" y="213" width="1.0" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="1072.48" y="223.5" ></text>
</g>
<g >
<title>large_dalloc (1 samples, 0.04%)</title><rect x="1086.1" y="165" width="0.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1089.12" y="175.5" ></text>
</g>
<g >
<title>DB::ColumnString::index(DB::IColumn const&amp;, unsigned long) const (47 samples, 2.01%)</title><rect x="79.6" y="373" width="23.7" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="82.59" y="383.5" >D..</text>
</g>
<g >
<title>DB::ReadBuffer::readStrict(char*, unsigned long) (12 samples, 0.51%)</title><rect x="1107.3" y="245" width="6.1" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1110.30" y="255.5" ></text>
</g>
<g >
<title>extent_purge_lazy_default.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="75.6" y="277" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="78.56" y="287.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::readFromFD(int, char const*, char*, unsigned long) (1 samples, 0.04%)</title><rect x="1121.9" y="277" width="0.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1124.92" y="287.5" ></text>
</g>
<g >
<title>arena_decay (1 samples, 0.04%)</title><rect x="75.6" y="357" width="0.5" height="15.0" fill="rgb(241,137,39)" rx="2" ry="2" />
<text  x="78.56" y="367.5" ></text>
</g>
<g >
<title>libunwind::CFI_Parser&lt;libunwind::LocalAddressSpace&gt;::parseInstructions(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::CFI_Parser&lt;libunwind::LocalAddressSpace&gt;::CIE_Info const&amp;, unsigned long, libunwind::PrologInfoStackEntry*&amp;, int, libunwind::PrologInfo*, libunwind::StackGuard&amp;) (1 samples, 0.04%)</title><rect x="684.7" y="165" width="0.5" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="687.72" y="175.5" ></text>
</g>
<g >
<title>bool LZ4::(anonymous namespace)::decompressImpl&lt;16ul, true&gt;(char const*, char*, unsigned long, unsigned long) (.llvm.5035804696300559578) (1 samples, 0.04%)</title><rect x="1061.9" y="149" width="0.5" height="15.0" fill="rgb(247,151,46)" rx="2" ry="2" />
<text  x="1064.91" y="159.5" ></text>
</g>
<g >
<title>pread64 (1 samples, 0.04%)</title><rect x="1121.9" y="261" width="0.5" height="15.0" fill="rgb(237,177,36)" rx="2" ry="2" />
<text  x="1124.92" y="271.5" ></text>
</g>
<g >
<title>__libc_realloc (7 samples, 0.30%)</title><rect x="657.0" y="245" width="3.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="659.98" y="255.5" ></text>
</g>
<g >
<title>bool LZ4::(anonymous namespace)::decompressImpl&lt;8ul, true&gt;(char const*, char*, unsigned long, unsigned long) (.llvm.5035804696300559578) (1 samples, 0.04%)</title><rect x="1112.8" y="165" width="0.6" height="15.0" fill="rgb(247,151,46)" rx="2" ry="2" />
<text  x="1115.85" y="175.5" ></text>
</g>
<g >
<title>DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic&lt;bool&gt;*) (2,139 samples, 91.41%)</title><rect x="76.1" y="469" width="1078.6" height="15.0" fill="rgb(241,133,40)" rx="2" ry="2" />
<text  x="79.06" y="479.5" >DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic&lt;bool&gt;*)</text>
</g>
<g >
<title>libunwind::DwarfInstructions&lt;libunwind::LocalAddressSpace, libunwind::Registers_x86_64&gt;::stepWithDwarf(libunwind::LocalAddressSpace&amp;, unsigned long, unsigned long, libunwind::Registers_x86_64&amp;) (2 samples, 0.09%)</title><rect x="386.2" y="245" width="1.0" height="15.0" fill="rgb(244,129,43)" rx="2" ry="2" />
<text  x="389.19" y="255.5" ></text>
</g>
<g >
<title>DB::ReadBufferFromFileDecorator::nextImpl() (1 samples, 0.04%)</title><rect x="1111.3" y="197" width="0.5" height="15.0" fill="rgb(245,133,44)" rx="2" ry="2" />
<text  x="1114.33" y="207.5" ></text>
</g>
<g >
<title>void DB::Aggregator::executeImplBatch&lt;false, false, DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;::State&amp;, DB::Arena*, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, char*) const (557 samples, 23.80%)</title><rect x="103.3" y="373" width="280.9" height="15.0" fill="rgb(237,131,35)" rx="2" ry="2" />
<text  x="106.29" y="383.5" >void DB::Aggregator::executeImplBatch..</text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::getPermutation(bool, unsigned long, int, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;) const (2 samples, 0.09%)</title><rect x="384.2" y="373" width="1.0" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="387.17" y="383.5" ></text>
</g>
<g >
<title>DB::SerializationString::deserializeBinaryBulk(DB::IColumn&amp;, DB::ReadBuffer&amp;, unsigned long, double) const (1 samples, 0.04%)</title><rect x="1113.9" y="245" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1116.85" y="255.5" ></text>
</g>
<g >
<title>madvise (1 samples, 0.04%)</title><rect x="1062.9" y="85" width="0.5" height="15.0" fill="rgb(241,99,40)" rx="2" ry="2" />
<text  x="1065.92" y="95.5" ></text>
</g>
<g >
<title>arena_extent_alloc_large (1 samples, 0.04%)</title><rect x="1113.9" y="181" width="0.5" height="15.0" fill="rgb(244,137,43)" rx="2" ry="2" />
<text  x="1116.85" y="191.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (6 samples, 0.26%)</title><rect x="1118.4" y="213" width="3.0" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1121.39" y="223.5" ></text>
</g>
<g >
<title>extent_purge_lazy_default.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1059.9" y="213" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1062.90" y="223.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl(long, bool) (1 samples, 0.04%)</title><rect x="77.6" y="325" width="0.5" height="15.0" fill="rgb(241,160,39)" rx="2" ry="2" />
<text  x="80.57" y="335.5" ></text>
</g>
<g >
<title>DB::ColumnUnique&lt;DB::ColumnString&gt;::uniqueDeserializeAndInsertFromArena(char const*, char const*&amp;) (5 samples, 0.21%)</title><rect x="426.0" y="293" width="2.5" height="15.0" fill="rgb(243,133,42)" rx="2" ry="2" />
<text  x="429.03" y="303.5" ></text>
</g>
<g >
<title>Allocator&lt;true, true&gt;::free(void*, unsigned long) (15 samples, 0.64%)</title><rect x="864.7" y="357" width="7.6" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="867.74" y="367.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1092.2" y="149" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1095.17" y="159.5" ></text>
</g>
<g >
<title>DB::ColumnLowCardinality::Index::getMaxPositionForCurrentType() const (1 samples, 0.04%)</title><rect x="425.5" y="293" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="428.52" y="303.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;1ul, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;::resize&lt;&gt;(unsigned long) (1 samples, 0.04%)</title><rect x="1189.0" y="549" width="0.5" height="15.0" fill="rgb(247,131,46)" rx="2" ry="2" />
<text  x="1191.99" y="559.5" ></text>
</g>
<g >
<title>DB::recursiveRemoveLowCardinality(COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; const&amp;) (47 samples, 2.01%)</title><rect x="79.6" y="389" width="23.7" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="82.59" y="399.5" >D..</text>
</g>
<g >
<title>memcpy (2 samples, 0.09%)</title><rect x="1090.7" y="53" width="1.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1093.66" y="63.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free(void*, unsigned long) (1 samples, 0.04%)</title><rect x="39.8" y="293" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="42.75" y="303.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.04%)</title><rect x="79.6" y="325" width="0.5" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="82.59" y="335.5" ></text>
</g>
<g >
<title>mmap64 (2 samples, 0.09%)</title><rect x="655.0" y="229" width="1.0" height="15.0" fill="rgb(237,104,36)" rx="2" ry="2" />
<text  x="657.97" y="239.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferBase::readCompressedData(unsigned long&amp;, unsigned long&amp;, bool) (9 samples, 0.38%)</title><rect x="1107.3" y="213" width="4.5" height="15.0" fill="rgb(241,133,39)" rx="2" ry="2" />
<text  x="1110.30" y="223.5" ></text>
</g>
<g >
<title>extent_purge_lazy_default.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1118.9" y="53" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1121.90" y="63.5" ></text>
</g>
<g >
<title>arena_decay_to_limit.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1059.9" y="245" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1062.90" y="255.5" ></text>
</g>
<g >
<title>DB::QueryPipeline::reset() (3 samples, 0.13%)</title><rect x="39.8" y="421" width="1.5" height="15.0" fill="rgb(239,133,38)" rx="2" ry="2" />
<text  x="42.75" y="431.5" ></text>
</g>
<g >
<title>memcpy (34 samples, 1.45%)</title><rect x="665.1" y="261" width="17.1" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="668.05" y="271.5" ></text>
</g>
<g >
<title>unw_step (2 samples, 0.09%)</title><rect x="895.0" y="245" width="1.0" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="898.00" y="255.5" ></text>
</g>
<g >
<title>DB::ExecutionThreadContext::executeTask() (2,075 samples, 88.68%)</title><rect x="76.1" y="453" width="1046.3" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="79.06" y="463.5" >DB::ExecutionThreadContext::executeTask()</text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::freeNoTrack(void*, unsigned long) (1 samples, 0.04%)</title><rect x="1060.4" y="293" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1063.40" y="303.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.09%)</title><rect x="288.9" y="261" width="1.0" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="291.86" y="271.5" ></text>
</g>
<g >
<title>arena_ralloc (3 samples, 0.13%)</title><rect x="898.5" y="309" width="1.5" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="901.53" y="319.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free(void*, unsigned long) (1 samples, 0.04%)</title><rect x="1086.1" y="181" width="0.5" height="15.0" fill="rgb(247,144,46)" rx="2" ry="2" />
<text  x="1089.12" y="191.5" ></text>
</g>
<g >
<title>MemoryTracker::free(long) (14 samples, 0.60%)</title><rect x="864.7" y="309" width="7.1" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="867.74" y="319.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned short&gt;::index(DB::IColumn const&amp;, unsigned long) const (3 samples, 0.13%)</title><rect x="1083.1" y="229" width="1.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1086.09" y="239.5" ></text>
</g>
<g >
<title>DB::ColumnString::insertRangeFrom(DB::IColumn const&amp;, unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1098.7" y="245" width="0.5" height="15.0" fill="rgb(247,133,46)" rx="2" ry="2" />
<text  x="1101.73" y="255.5" ></text>
</g>
<g >
<title>memcpy (13 samples, 0.56%)</title><rect x="96.7" y="325" width="6.6" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="99.74" y="335.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.04%)</title><rect x="663.5" y="165" width="0.5" height="15.0" fill="rgb(230,167,28)" rx="2" ry="2" />
<text  x="666.54" y="175.5" ></text>
</g>
<g >
<title>MemoryTracker::free(long) (2 samples, 0.09%)</title><rect x="386.2" y="293" width="1.0" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="389.19" y="303.5" ></text>
</g>
<g >
<title>arena_decay_to_limit.llvm.9380087101054605540 (1 samples, 0.04%)</title><rect x="1118.9" y="85" width="0.5" height="15.0" fill="rgb(228,137,26)" rx="2" ry="2" />
<text  x="1121.90" y="95.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned int&gt;::insert(DB::Field const&amp;) (9 samples, 0.38%)</title><rect x="682.2" y="293" width="4.5" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="685.20" y="303.5" ></text>
</g>
<g >
<title>DB::ReverseIndex&lt;unsigned long, DB::ColumnString&gt;::insert(StringRef const&amp;) (6 samples, 0.26%)</title><rect x="35.7" y="549" width="3.0" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="38.72" y="559.5" ></text>
</g>
<g >
<title>DB::IAggregateFunctionHelper&lt;DB::AggregateFunctionCount&gt;::insertResultIntoBatch(unsigned long, char**, unsigned long, DB::IColumn&amp;, DB::Arena*, bool) const (44 samples, 1.88%)</title><rect x="387.2" y="325" width="22.2" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="390.20" y="335.5" >D..</text>
</g>
<g >
<title>DB::ISource::work() (1,338 samples, 57.18%)</title><rect x="385.2" y="437" width="674.7" height="15.0" fill="rgb(237,133,36)" rx="2" ry="2" />
<text  x="388.18" y="447.5" >DB::ISource::work()</text>
</g>
<g >
<title>large_dalloc (1 samples, 0.04%)</title><rect x="1059.9" y="309" width="0.5" height="15.0" fill="rgb(238,101,36)" rx="2" ry="2" />
<text  x="1062.90" y="319.5" ></text>
</g>
<g >
<title>arena_ralloc (2 samples, 0.09%)</title><rect x="1080.1" y="149" width="1.0" height="15.0" fill="rgb(238,137,36)" rx="2" ry="2" />
<text  x="1083.07" y="159.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::ColumnString::indexImpl&lt;unsigned short&gt;(DB::PODArray&lt;unsigned short, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, unsigned long) const (3 samples, 0.13%)</title><rect x="1097.2" y="213" width="1.5" height="15.0" fill="rgb(237,154,35)" rx="2" ry="2" />
<text  x="1100.21" y="223.5" ></text>
</g>
<g >
<title>unw_step (1 samples, 0.04%)</title><rect x="384.2" y="293" width="0.5" height="15.0" fill="rgb(243,138,42)" rx="2" ry="2" />
<text  x="387.17" y="303.5" ></text>
</g>
<g >
<title>DB::ProcfsMetricsProvider::readParseAndSetThreadBlkIOStat(taskstats&amp;, char*, unsigned long) const (1 samples, 0.04%)</title><rect x="1121.9" y="293" width="0.5" height="15.0" fill="rgb(237,133,35)" rx="2" ry="2" />
<text  x="1124.92" y="303.5" ></text>
</g>
<g >
<title>free_default (1 samples, 0.04%)</title><rect x="75.6" y="389" width="0.5" height="15.0" fill="rgb(228,177,25)" rx="2" ry="2" />
<text  x="78.56" y="399.5" ></text>
</g>
<g >
<title>bool LZ4::(anonymous namespace)::decompressImpl&lt;16ul, true&gt;(char const*, char*, unsigned long, unsigned long) (.llvm.5035804696300559578) (1 samples, 0.04%)</title><rect x="1112.3" y="165" width="0.5" height="15.0" fill="rgb(247,151,46)" rx="2" ry="2" />
<text  x="1115.34" y="175.5" ></text>
</g>
<g >
<title>extent_record.llvm.8560445672181916695 (1 samples, 0.04%)</title><rect x="1086.1" y="133" width="0.5" height="15.0" fill="rgb(243,145,42)" rx="2" ry="2" />
<text  x="1089.12" y="143.5" ></text>
</g>
</g>
</svg>
